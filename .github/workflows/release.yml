name: Release

on:
  workflow_dispatch:

concurrency:
  group: release-${{ github.ref_name }}
  cancel-in-progress: true

jobs:
  release:
    name: Release
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v3
        with:
          fetch-depth: 0
      - name: Use Node.js latest
        uses: actions/setup-node@v3
        with:
          node-version: "*"
          cache: "yarn"
      - name: Install
        run: yarn install --immutable
      - name: Create PR
        id: changesets
        uses: changesets/action@v1
        with:
          commit: "ci: ${{ github.ref_name }} release"
          title: "ci: ${{ github.ref_name }} release"
          createGithubReleases: true
          publish: yarn workspaces foreach --no-private npm publish --tolerate-republish
          version: yarn changeset version
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          GH_REGISTRY_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      - name: Tags
        id: tags
        if: steps.changesets.outputs.hasChangesets == 'false'
        uses: actions/github-script@v6
        with:
          script: |
            const cwd = process.cwd();
            const { runTagCommand } = await import('${{ github.workspace }}/scripts/changesets.mjs');
            const { createRelease } = await import('${{ github.workspace }}/scripts/release.mjs');
            const releasedPackages = await runTagCommand({ cwd, exec });
            
            core.setOutput('releasedPackages', JSON.stringify(releasedPackages));
            console.log(releasedPackages);
            await Promise.all(releasedPackages.map((pkg) => createRelease(octokit, pkg, github.context)));
        env:
          NODE_OPTIONS: --require="./.pnp.cjs" --experimental-loader="./.pnp.loader.mjs"
      - name: Push tags
        if: steps.changesets.outputs.hasChangesets == 'false'
        run: |
          git push --follow-tags
