name: Release

on:
  workflow_dispatch:

concurrency:
  group: release-${{ github.ref_name }}
  cancel-in-progress: true

jobs:
  release:
    name: Release
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v3
        with:
          fetch-depth: 0
      - name: Use Node.js latest
        uses: actions/setup-node@v3
        with:
          node-version: "*"
          cache: "yarn"
      - name: Install
        run: yarn install --immutable
      - name: Create PR
        id: changesets
        uses: changesets/action@v1
        with:
          commit: "ci: ${{ github.ref_name }} release"
          title: "ci: ${{ github.ref_name }} release"
          createGithubReleases: true
          publish: yarn workspaces foreach --no-private npm publish --tolerate-republish
          version: yarn changeset version
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          GH_REGISTRY_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      - name: Tags
        id: tags
        if: steps.changesets.outputs.hasChangesets == 'false'
        uses: actions/github-script@v6
        with:
          script: |
            const { getPackages } = require('@manypkg/get-packages');
            const { createExec } = await import('${{ github.workspace }}/scripts/gh-exec.mjs');
            const cwd = process.cwd();
            const { packages } = await getPackages(cwd);
            const newTagRegex = /New tag:\s+(@[^/]+\/[^@]+|[^/]+)@([^\s]+)/;
            const releasedPackages = [];
            const packagesByName = new Map(packages.map((pkg) => [pkg.packageJson.name, pkg]));
            const execAsync = createExec(exec);
            const { stdout } = await execAsync('yarn', ['changeset', 'tag'], {
              cwd,
            });
            
            for (const line of stdout.split('\n')) {
              const match = line.match(newTagRegex);
              if (match === null) {
                return;
              }
            
              const pkgName = match[1];
              const pkg = packagesByName.get(pkgName);
              if (!pkg) {
                return;
              }
            
              releasedPackages.push(pkg);
            }
            
            core.setOutput('releasedPackages', JSON.stringify(releasedPackages));
        env:
          NODE_OPTIONS: --require="./.pnp.cjs"
      - name: Push tags
        if: steps.changesets.outputs.hasChangesets == 'false'
        run: |
          git push --follow-tags
      - name: Create release
        if: steps.changesets.outputs.hasChangesets == 'false'
        run: |
          echo ${{ steps.tags.outputs.releasedPackages }}
          node ./scripts/create-release.mjs
        env:
          RELEASED_PACKAGES: ${{ steps.tags.outputs.releasedPackages }}
