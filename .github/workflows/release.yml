name: Release

on:
  workflow_dispatch:

concurrency:
  group: release-${{ github.ref_name }}
  cancel-in-progress: true

jobs:
  release:
    name: Release
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v3
        with:
          fetch-depth: 0
      - name: Use Node.js latest
        uses: actions/setup-node@v3
        with:
          node-version: "*"
          cache: "yarn"
      - name: Install
        run: yarn install --immutable
      - name: Create PR
        id: changesets
        uses: changesets/action@v1
        with:
          commit: "ci: ${{ github.ref_name }} release"
          title: "ci: ${{ github.ref_name }} release"
          createGithubReleases: true
          publish: yarn workspaces foreach --no-private npm publish --tolerate-republish
          version: yarn changeset version
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          GH_REGISTRY_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      - name: Tags
        id: tags
        if: steps.changesets.outputs.hasChangesets == 'false'
        uses: actions/github-script@v6
        with:
          script: |
            const { getPackages } = require('@manypkg/get-packages') 
            const cwd = process.cwd();
            const { packages, tool } = await getPackages(cwd);
            
            let myError = '';
            
            console.log(packages);
            
            const newTagRegex = /New tag:\s+(@[^/]+\/[^@]+|[^/]+)@([^\s]+)/;
            const skipRegex = /Skipping tag \(already exists\):\s+(@[^/]+\/[^@]+|[^/]+)@([^\s]+)/;
            const releasedPackages = [];
            const options = {
              cwd,
              listeners: {
                stdout: (data) => {
                  const match = data.toString().match(newTagRegex);
                  const matchSkip = data.toString().match(skipRegex);
            
                  console.log(matchSkip);
            
                  if (match === null) {
                    return;
                  }
            
                  console.log('match', match);
            
                  releasedPackages.push(match[1]);
                },
                stderr: (data) => {
                  myError += data.toString();
                },
              },
            };
            
            await exec.exec('yarn', ['changeset', 'tag'], options);
            
            console.log('releasedPackages', releasedPackages);
        env:
          NODE_OPTIONS: '--require "./.pnp.cjs"'
      - name: Push tags
        if: steps.changesets.outputs.hasChangesets == 'false'
        run: |
          git push --follow-tags
      - name: Create release
        if: steps.changesets.outputs.hasChangesets == 'false'
        run: node ./scripts/create-release.js
        env:
          GENERATED_TAGS: ${{ steps.tags.outputs.GENERATED_TAGS }}
